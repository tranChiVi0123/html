/*

 flipsnap.js

 @version  0.2.2
 @url http://pxgrid.github.com/js-flipsnap/

 Copyright 2011 PixelGrid, Inc.
 Licensed under the MIT License:
 http://www.opensource.org/licenses/mit-license.php
*/
(function (w, i, e) {
    var j, g, n, o, f;

    function b(a, c) {
        return this instanceof b ? this.init(a, c) : new b(a, c)
    }
    function x(a) {
        return j ? "translate3d(" + a + "px, 0, 0)" : "translate(" + a + "px, 0)"
    }
    function k(a, c) {
        return g ? a.changedTouches[0][c] : a[c]
    }
    function p(a) {
        return q(a, function (a) {
            return r.style[a] !== e
        })
    }
    function z(a, c, s) {
        var b = l[c];
        b ? a[b] = s : a[c] !== e ? (l[c] = c, a[c] = s) : q(y, function (b) {
            b = m(b) + m(c);
            if (a[b] !== e) return l[c] = b, a[b] = s, !0
        })
    }
    function A(a) {
        if (r.style[a] !== e) return a;
        var c;
        q(y, function (b) {
            var d = m(b) + m(a);
            if (r.style[d] !== e) return c = "-" + b + "-" + a, !0
        });
        return c
    }
    function m(a) {
        return a.charAt(0).toUpperCase() + a.substr(1)
    }
    function q(a, c) {
        for (var b = 0, d = a.length; b < d; b++) if (c(a[b], b)) return !0;
        return !1
    }
    var r = i.createElement("div"),
        y = ["webkit", "moz", "o", "ms"],
        l = {};
    j = void 0;
    g = void 0;
    n = void 0;
    o = void 0;
    f = void 0;
    j = p(["perspectiveProperty", "WebkitPerspective", "MozPerspective", "OPerspective", "msPerspective"]);
    n = p(["transformProperty", "WebkitTransform", "MozTransform", "OTransform", "msTransform"]);
    o = p(["transitionProperty", "WebkitTransitionProperty", "MozTransitionProperty", "OTransitionProperty", "msTransitionProperty"]);
    g = "ontouchstart" in w;
    f = (j || n) && o;
    var t = g ? "touchstart" : "mousedown",
        u = g ? "touchmove" : "mousemove",
        v = g ? "touchend" : "mouseup";
    b.prototype.init = function (a, c) {
        this.element = a;
        if ("string" === typeof a) this.element = i.querySelector(a);
        f ? this._setStyle({
            transitionProperty: A("transform"),
            transitionTimingFunction: "cubic-bezier(0,0,0.25,1)",
            transitionDuration: "0ms",
            transform: x(0)
        }) : this._setStyle({
            position: "relative",
            left: "0px"
        });
        this.conf = c || {};
        this.currentX = this.currentPoint = 0;
        this.animation = !1;
        this.refresh();
        this.element.addEventListener(t, this, !1);
        this.element.addEventListener(u, this, !1);
        this.element.addEventListener(v, this, !1);
        return this
    };
    b.prototype.handleEvent = function (a) {
        switch (a.type) {
        case t:
            this._touchStart(a);
            break;
        case u:
            this._touchMove(a);
            break;
        case v:
            this._touchEnd(a);
            break;
        case "click":
            this._click(a)
        }
    };
    b.prototype.refresh = function () {
        var a;
        if (!(a = this.conf.maxPoint)) if (!(a = this.conf.point)) {
            a = this.element.childNodes;
            for (var c = 0, b = 0, d = a.length, e; b < d; b++) e = a[b], 1 === e.nodeType && c++;
            0 < c && c--;
            a = c
        }
        this.maxPoint = a;
        this.distance = this.conf.distance || this.element.scrollWidth / (this.maxPoint + 1);
        this.maxX = -this.distance * this.maxPoint;
        this.moveToPoint()
    };
    b.prototype.hasNext = function () {
        return this.currentPoint < this.maxPoint
    };
    b.prototype.hasPrev = function () {
        return 0 < this.currentPoint
    };
    b.prototype.toNext = function () {
        this.hasNext() && this.moveToPoint(this.currentPoint + 1)
    };
    b.prototype.toPrev = function () {
        this.hasPrev() && this.moveToPoint(this.currentPoint - 1)
    };
    b.prototype.moveToPoint = function (a) {
        var c = this.currentPoint;
        if (a === e) a = this.currentPoint;
        this.currentPoint = 0 > a ? 0 : a > this.maxPoint ? this.maxPoint : parseInt(a);
        f ? this._setStyle({
            transitionDuration: "350ms"
        }) : this.animation = !0;
        this._setX(-this.currentPoint * this.distance);
        if (c !== this.currentPoint) a = this.element, c = i.createEvent("Event"), c.initEvent("fsmoveend", !0, !1), a.dispatchEvent(c), a = this.element, c = i.createEvent("Event"), c.initEvent("flipsnap.moveend", !0, !1), a.dispatchEvent(c)
    };
    b.prototype._setX = function (a) {
        this.currentX = a;
        f ? this.element.style[l.transform] = x(a) : this.animation ? this._animate(a) : this.element.style.left = a + "px"
    };
    b.prototype._touchStart = function (a) {
        if (!this.conf.touchDisable) f ? this._setStyle({
            transitionDuration: "0ms"
        }) : this.animation = !1, this.scrolling = !0, this.moveReady = !1, this.startPageX = k(a, "pageX"), this.startPageY = k(a, "pageY"), this.basePageX = this.startPageX, this.directionX = 0, this.startTime = a.timeStamp
    };
    b.prototype._touchMove = function (a) {
        if (this.scrolling) {
            var c = k(a, "pageX"),
                b = k(a, "pageY"),
                d;
            if (this.moveReady) {
                a.preventDefault();
                a.stopPropagation();
                a = c - this.basePageX;
                d = this.currentX + a;
                if (0 <= d || d < this.maxX) d = Math.round(this.currentX + a / 3);
                this._setX(d);
                this.directionX = 0 === a ? this.directionX : 0 < a ? -1 : 1
            } else if (d = Math.abs(c - this.startPageX), b = Math.abs(b - this.startPageY), 5 < d) a.preventDefault(), a.stopPropagation(), this.moveReady = !0, this.element.addEventListener("click", this, !0);
            else if (5 < b) this.scrolling = !1;
            this.basePageX = c
        }
    };
    b.prototype._touchEnd = function () {
        var a = this;
        if (a.scrolling) {
            a.scrolling = !1;
            var c = -a.currentX / a.distance,
                c = 0 < a.directionX ? Math.ceil(c) : 0 > a.directionX ? Math.floor(c) : Math.round(c);
            a.moveToPoint(c);
            setTimeout(function () {
                a.element.removeEventListener("click", a, !0)
            }, 200)
        }
    };
    b.prototype._click = function (a) {
        a.stopPropagation();
        a.preventDefault()
    };
    b.prototype._setStyle = function (a) {
        var c = this.element.style,
            b;
        for (b in a) z(c, b, a[b])
    };
    b.prototype._animate = function (a) {
        var b = this.element,
            e = +new Date,
            d = parseInt(b.style.left),
            g = setInterval(function () {
                var h = new Date - e;
                if (350 < h) clearInterval(g), h = a;
                else var f = h,
                    h = -(f /= 350) * (f - 2),
                    h = h * (a - d) + d;
                b.style.left = h + "px"
            }, 10)
    };
    b.prototype.destroy = function () {
        this.element.removeEventListener(t, this);
        this.element.removeEventListener(u, this);
        this.element.removeEventListener(v, this)
    };
    w.Flipsnap = b
})(window, window.document);
